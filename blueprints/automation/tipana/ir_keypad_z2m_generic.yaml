blueprint:
  name: IR Keypad â†’ Zigbee2MQTT (Generic, with examples)
  description: |
    Control ANY IR device via an input_select and a Zigbee2MQTT IR blaster, using YOUR labels.

    âœ¨ Features
    - Works with any input_select labels (no renaming required).
    - Power can be a single toggle code or distinct ON/OFF codes.
    - Optional energy monitoring (smart plug W) or a helper boolean for state.
    - Avoids wrong-way toggles by checking real (or helper) state.
    - Auto snap-back to your "On" label after non-power actions (optional guard).

    ðŸ§° How to Use
    1. Create an input_select with your button labels (e.g. On, Off, Speed Up).
    2. Import this blueprint and create one automation per device (fan, heater, etc).
    3. Fill in:
       - Your input_select entity
       - Zigbee2MQTT topic (e.g. zigbee2mqtt/IR_Blaster_Parents_Bedroom/set)
       - Power labels and codes
       - JSON map of other button labels â†’ IR codes
       - (Optional) energy sensor or helper boolean
       - (Optional) guard boolean to prevent snap-back loops

    ðŸ–¼ Example input_select (YAML helper):
      input_select:
        fan_control:
          name: Fan Control
          options:
            - "On"
            - "Off"
            - "Speed Up"
            - "Speed Down"
            - "Swing Up"
            - "Swing Down"
            - "Left"
            - "Right"
            - "Burst"
          initial: "Off"

    ðŸ§ª Example JSON maps
    Shark Fan:
    {
      "Speed Up": "ByAjTxFwAgYC...",
      "Speed Down": "BxojRxFpAgAC...",
      "Swing Up": "Bw8jVBFfAhkC...",
      "Swing Down": "Bx4jahFrAgYC...",
      "Left": "BxAjUxFpAggC...",
      "Right": "BR4jURE6AuAX...",
      "Burst": "BiUjRhFrAghg..."
    }

    Heater:
    {
      "Up": "B+IjlhFxAgkC...",
      "Down": "B9gjmhFuAhAC...",
      "Sensor": "Cd8jkRFcAvwB...",
      "Timer": "B9QjdBF2Av4B..."
    }

    âš¡ Power Codes (toggle examples):
    Fan:    BxAjUBFtAvoB4BUDAWMG4BkDQENAJ+ALB+ALEwtjBm0C+gFtAmMGbQI=
    Heater: BwckkxF6AvwB4BEDAXkG4BUDwDtAJ0ALQAdAA0ALwAPAD8AHQBdAC8ADBwedBySkCHoC

    Author: Tipana
    Source: https://github.com/Tipana/home-assistant-blueprints

  domain: automation
  author: Tipana

  input:
    select_entity:
      name: Keypad input_select
      selector:
        entity:
          domain: input_select

    mqtt_topic:
      name: Zigbee2MQTT command topic
      selector: { text: {} }

    power_on_label:
      name: Label for "Power On"
      default: "On"
      selector: { text: {} }
    power_off_label:
      name: Label for "Power Off"
      default: "Off"
      selector: { text: {} }

    use_distinct_power_codes:
      name: Use distinct ON/OFF codes?
      default: false
      selector: { boolean: {} }

    power_code_toggle:
      name: POWER (toggle) base64
      default: ""
      selector: { text: {} }
    power_code_on:
      name: POWER ON base64
      default: ""
      selector: { text: {} }
    power_code_off:
      name: POWER OFF base64
      default: ""
      selector: { text: {} }

    actions_map_json:
      name: Non-power actions map (JSON)
      default: "{}"
      selector: { object: {} }

    energy_sensor:
      name: (Optional) Energy sensor (W)
      default: ""
      selector:
        entity:
          domain: sensor
    on_watts:
      name: ON threshold (W)
      default: 5
      selector:
        number:
          min: 0
          max: 3000
          step: 1
          unit_of_measurement: W

    power_helper:
      name: (Optional) Power helper boolean
      default: ""
      selector:
        entity:
          domain: input_boolean
    guard_boolean:
      name: (Optional) Guard boolean
      default: ""
      selector:
        entity:
          domain: input_boolean

mode: restart

variables:
  v_select: !input select_entity
  v_topic: !input mqtt_topic
  v_label_on: !input power_on_label
  v_label_off: !input power_off_label
  v_use_distinct: !input use_distinct_power_codes
  v_code_toggle: !input power_code_toggle
  v_code_on: !input power_code_on
  v_code_off: !input power_code_off
  v_actions_map: !input actions_map_json
  v_energy: !input energy_sensor
  v_on_watts: !input on_watts
  v_helper: !input power_helper
  v_guard: !input guard_boolean

trigger:
  - platform: state
    entity_id: !input select_entity

action:
  - variables:
      picked: "{{ trigger.to_state.state }}"
      is_power_on: "{{ picked == v_label_on }}"
      is_power_off: "{{ picked == v_label_off }}"
      is_power_key: "{{ is_power_on or is_power_off }}"
      power_on: >-
        {% if v_energy %}
          {{ (states(v_energy) | float(0)) > (v_on_watts | float(0)) }}
        {% elif v_helper %}
          {{ is_state(v_helper, 'on') }}
        {% else %}
          unknown
        {% endif %}
      should_send: >-
        {% if is_power_on %}
          {% if v_use_distinct %}true{% else %}
            {% if power_on in [false] %}true{% elif power_on in [true] %}false{% else %}true{% endif %}
          {% endif %}
        {% elif is_power_off %}
          {% if v_use_distinct %}true{% else %}
            {% if power_on in [true] %}true{% elif power_on in [false] %}false{% else %}true{% endif %}
          {% endif %}
        {% else %}
          true
        {% endif %}
      chosen_code: >-
        {% if is_power_key and v_use_distinct %}
          {% if is_power_on %}{{ v_code_on }}{% else %}{{ v_code_off }}{% endif %}
        {% elif is_power_key %}
          {{ v_code_toggle }}
        {% else %}
          {{ v_actions_map.get(picked, '') }}
        {% endif %}

  - condition: template
    value_template: "{{ (chosen_code | default('')) | string | length > 0 }}"
  - condition: template
    value_template: "{{ should_send | bool }}"

  - service: mqtt.publish
    data:
      topic: "{{ v_topic }}"
      payload: >-
        {"ir_code_to_send":"{{ chosen_code }}"}

  - choose:
      - conditions: "{{ v_helper != '' and is_power_on }}"
        sequence:
          - service: input_boolean.turn_on
            target: { entity_id: "{{ v_helper }}" }
      - conditions: "{{ v_helper != '' and is_power_off }}"
        sequence:
          - service: input_boolean.turn_off
            target: { entity_id: "{{ v_helper }}" }

  - choose:
      - conditions: "{{ (not is_power_key) and picked != v_label_on }}"
        sequence:
          - choose:
              - conditions: "{{ v_guard != '' }}"
                sequence:
                  - service: input_boolean.turn_on
                    target: { entity_id: "{{ v_guard }}" }
                  - delay: "00:00:01"
                  - service: input_select.select_option
                    data:
                      entity_id: "{{ v_select }}"
                      option: "{{ v_label_on }}"
                  - delay: "00:00:01"
                  - service: input_boolean.turn_off
                    target: { entity_id: "{{ v_guard }}" }
            default:
              - delay: "00:00:01"
              - service: input_select.select_option
                data:
                  entity_id: "{{ v_select }}"
                  option: "{{ v_label_on }}"
